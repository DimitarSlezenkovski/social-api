swagger: '2.0'
info:
  title: Social API
  version: "0.1"
  description: Social microservice API
consumes:
  - application/json
produces:
  - application/json
basePath: "/api"
paths:
  /friends/{user_id}:
    get:
      tags: [ User friends ]
      operationId: app.get_all_user_friends
      summary: Testing endpoint
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return users list
        404:
          description: Does not exist

  /timeline/{user_id}:
    get:
      tags: [ User timeline ]
      operationId: app.get_user_timeline
      summary: Testing endpoint
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return user feed
        404:
          description: Does not exists

  /feed/{user_id}:
    get:
      tags: [ User feed ]
      operationId: app.get_global_feed
      summary: Testing endpoint
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return global feed
        404:
          description: Does not exists

  /requests/{user_id}:
    get:
      tags: [ User friend requests ]
      operationId: app.get_all_user_friend_requests
      summary: Testing endpoint
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return friend requests
        404:
          description: Does not exists

  /location:
    post:
      tags: [ SaveUserLocation ]
      operationId: app.saveUserLocation
      summary: Saving user location
      parameters:
        - $ref: '#/parameters/locationBody'
      responses:
        200:
          description: OK
        404:
          description: Internal server error

  /ecyclists:
    get:
      tags: [ GetAllUsersLocation ]
      operationId: app.getAllUsersLocation
      summary: Getting all users locations
      responses:
        200:
          description: OK

  /ecycleservices:
    get:
      tags: [ GetEcycleServices ]
      operationId: app.getEcycleServices
      summary: Getting ecycle services
      responses:
        200:
          description: OK

  /cyclehistory/{userId}:
    get:
      tags: [ GetCycleHistory ]
      operationId: app.getCycleHistory
      summary: Get cycle history
      parameters:
        - $ref: '#/parameters/userId'
      responses:
        200:
          description: OK
        404:
          description: Internal server error

  /posts/edit:
    put:
      tags: [ EditPost ]
      operationId: app.editPost
      summary: Editing post
      parameters:
        - $ref: '#/parameters/postBody'
      responses:
        200:
          description: OK
        404:
          description: Internal server error

  /posts/delete/{postId}:
    delete:
      tags: [ DeletePost ]
      operationId: app.deletePost
      summary: Deleting post
      parameters:
        - $ref: '#/parameters/postId'
      responses:
        200:
          description: OK
        404:
          description: Internal server error

  /deleteComment/:
    post : 
      tags : [ Delete comment ]
      operationId : app.deleteComment
      summary : Deleting a comment
      parameters : 
        - $ref : '#/parameters/delCommentBody'
      responses : 
        200 : 
          description : OK
        400:
          description: Bad request
        500 : 
          description : Internal server error

  /deleteCyclingParty/:
    post:
      tags : [ DeleteCyclingParty ]
      operationId : app.deleteCyclingParty
      summary : Deleting a cycling party
      parameters : 
        - $ref : '#/parameters/delPartyBody'
      responses : 
        200 : 
          description : OK
        500 : 
          description : Internal server error

  /addCycledRoute/:
    post:
      tags : [ AddCycledRoute ]
      operationId : app.addCycledRoute
      summary : User adding a cycled route
      parameters : 
        - $ref : '#/parameters/cycledRouteBody'
      responses : 
        200 : 
          description : OK
        500 : 
          description : Internal server error

  /leaveParty/:
    post:
      tags : [ LeaveParty ]
      operationId : app.leaveParty
      summary : Leaving a cycling party
      parameters : 
        - $ref : '#/parameters/leavePartyBody'
      responses : 
        200 :
          description : OK
        500 :
          description : Internal server error

  /postComment/:
    post:
      tags : [ PostComment ]
      operationId : app.postComment
      summary : Posting a comment to an existing post
      parameters : 
          - $ref : '#/parameters/commentBody'
      responses : 
        200 : 
          description : OK
        500 : 
          description : Internal server error

  /createPost/:
    post:
      tags : [ CreatePost ]
      operationId : app.createPost
      summary : Creating a new post
      parameters : 
        - $ref : '#/parameters/postBody'
      responses :
        200 : 
          description : OK
        500 : 
          description : Internal server error

  /createRoute/:
    post:
      tags : [ CreateRoute ]
      operationId : app.addRoute
      summary : Adding a new route
      parameters : 
        - $ref : '#/parameters/routeBody'
      responses : 
        200 :
          description : OK
        500 : 
          description : Internal server error

  /createCycleParty/:
    post:
      tags : [ CreateCycleParty ]
      operationId : app.createCycleParty
      summary : Creating a cycle party
      parameters :
        - $ref : '#/parameters/cyclePartyBody'
      responses : 
        200 :
          description : OK
        500 : 
          description : Internal server error

  /ackFriendRequest/:
    post:
      tags : [ AcknowledgeFriendRequest ]
      operationId : app.ackFriendRequest
      summary : User acknowledging a friend request
      parameters : 
        - $ref : '#/parameters/friendBody'
      responses : 
        200 :
          description : OK
        500 : 
          description : Internal server error

  /sendFriendRequest/:
    post:
      tags : [ FriendRequest ]
      operationId : app.sendFriendRequest
      summary : Sending a friend request
      parameters : 
        - $ref : '#/parameters/friendRequestBody'
      responses : 
        200:
          description : OK
        500:
          description : Internal server error

  /sendMsg/:
    post:
      tags : [ Message ]
      operationId : app.sendMessage
      summary : Sending a message
      parameters:
        - $ref : '#/parameters/msgBody'
      responses : 
        200:
          description : Message successfully sent and saved
        500:
          description : Internal server error

parameters:
  locationBody:
    name: locationBody
    description: locationBody
    in: body
    schema : 
      required : 
        - userId
        - lat
        - lng
        - isCycleService
      properties :
        userId : 
          type : integer
        lat : 
          type : string
        lng :
          type : string
        isCycleService :
          type : boolean
          
  user_id:
    name: user_id
    description: User unique id
    in: path
    type: integer
    required: true
    
  userId:
    name: userId
    description: User id
    in: path
    type: integer
    required: true
    
  msgBody :
    name : msgBody
    description : The body of the message
    in : body
    schema :
      required :
        - fromUserId
        - toUserId
        - text
      properties : 
        fromUserId :
          type : integer
        toUserId :
          type : integer
        text : 
          type : string

  friendRequestBody:
    name : friendRequestBody
    description : The body for a friend request
    in : body
    schema:
      required :
        - fromUserId
        - toUserId
      properties:
        fromUserId :
          type : integer
        toUserId :
          type : integer

  friendBody:
    name : friendBody
    description : This is used when a user accepts/rejects a friend request
    in : body
    schema : 
      required :
        - requestRecepient
        - requestSender
        - resp
      properties :
        requestRecepient :
          type : integer
        requestSender :
          type : integer
        resp :
          type : boolean

  cyclePartyBody : 
    name : cyclePartyBody
    description : This is used to create a cycling party
    in : body
    schema : 
      required : 
        - routeId
        - partyCreatorId
      properties :
        routeId :
          type : string
        partyCreatorId : 
          type : integer

  routeBody : 
    name : routeBody
    description : This is used to create a route
    in : body
    schema : 
      required : 
        - lngFrom 
        - latFrom
        - lngTo
        - latTo
      properties : 
        lngFrom : 
          type : string
        latFrom : 
          type : string
        lngTo : 
          type : string
        latTo : 
          type : string

  postBody:
    name : postBody
    description : This will create a new post (not the http method haha)
    in : body
    schema : 
      required : 
        - userId
        - text
      properties :
        userId : 
          type : integer
        text : 
          type : string
        image :
          type : string

  postId:
    name: postId
    description: Post id
    in: path
    type: string
    required: true

  commentBody : 
    name : commentBody
    description : This will post a comment to an existing post
    in : body
    schema : 
      required : 
        - postId
        - userId
        - text
      properties : 
        postId :
          type : string
        userId :
          type : integer
        text : 
          type : string
  
  leavePartyBody : 
    name : leavePartyBody
    description : This is used when someone wants to leave a party
    in : body 
    schema : 
      required :
        - partyId 
        - userId
      properties : 
        partyId : 
          type : string
        userId : 
          type : integer

  cycledRouteBody :
    name : cycledRouteBody
    description : This is used when a user adds a cycled route
    in : body
    schema : 
      required :
        - userId
        - route
        - userWeight
        - cycledTime
      properties : 
        userId : 
          type : integer
        route : 
          type : string
        userWeight : 
          type : string
        cycledTime : 
          type : string

  delPartyBody : 
    name : delPartyBody
    description : This is used to delete a cycling party 
    in : body
    schema : 
      required : 
        - userId
        - partyId
      properties : 
        userId : 
          type : integer
        partyId : 
          type : string

  delCommentBody : 
    name : delCommentBody
    description : This is used to delete a comment
    in : body
    schema : 
      required : 
        - userId
        - postId
        - commentId
      properties : 
        userId : 
          type : integer
        commentId : 
          type : string
        postId : 
          type : string
